import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    PreCheckoutQueryHandler,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7136893641:AAE_45HJZLRHFTMwBai9nCVz0Ny65jP5hrE'
PROVIDER_TOKEN = '1744374395:TEST:cfe04e369c98430aad94'
ADMIN_CHAT_ID = 1494753646

SERVICES = {
    "üé® –î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞": 10000,
    "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞": 20000,
    "üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": 50000,
    "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞": 15000,
    "üìà SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": 30000,
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Digital Solutions</b>!\n\n"
        "üöÄ –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:"
    )

    keyboard = [[InlineKeyboardButton(service, callback_data=service)] for service in SERVICES]
    await update.message.reply_html(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data not in SERVICES:
        return

    selected_service = query.data
    price = SERVICES[selected_service]

    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=f"–û–ø–ª–∞—Ç–∞: {selected_service}",
        description="‚ö° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤",
        payload=f"{query.message.chat_id}_{selected_service}",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(selected_service, price)],
        need_name=True
    )


async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.pre_checkout_query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    payment = update.message.successful_payment
    service = payment.invoice_payload.split("_")[1]
    user = update.message.from_user

    keyboard = [[InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏", callback_data="restart")]]
    await update.message.reply_html(
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"üíº –£—Å–ª—É–≥–∞: {service}\n"
        f"üí≥ –°—É–º–º–∞: {payment.total_amount // 100} ‚ÇΩ\n\n"
        "‚è≥ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>2 —á–∞—Å–æ–≤</b>",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
             f"üë§ –ö–ª–∏–µ–Ω—Ç: @{user.username}\n"
             f"üíº –£—Å–ª—É–≥–∞: {service}\n"
             f"üí∞ –°—É–º–º–∞: {payment.total_amount // 100} ‚ÇΩ",
        parse_mode="HTML"
    )


async def restart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.delete()

    welcome_text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:"
    keyboard = [[InlineKeyboardButton(service, callback_data=service)] for service in SERVICES]
    await query.message.reply_html(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard))


def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(restart_handler, pattern="^restart$"))
    application.add_handler(CallbackQueryHandler(service_handler))
    application.add_handler(PreCheckoutQueryHandler(precheckout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    application.run_polling()


if __name__ == '__main__':
    main()