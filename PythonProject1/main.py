import json
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_questions():
    with open('questions.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª
def save_results(user_id, score):
    try:
        with open('results.json', 'r', encoding='utf-8') as file:
            results = json.load(file)
    except FileNotFoundError:
        results = {}

    results[user_id] = score

    with open('results.json', 'w', encoding='utf-8') as file:
        json.dump(results, file, ensure_ascii=False, indent=4)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_results(user_id):
    try:
        with open('results.json', 'r', encoding='utf-8') as file:
            results = json.load(file)
            return results.get(str(user_id), 0)
    except FileNotFoundError:
        return 0

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    score = get_user_results(user_id)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score}\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup([['–õ—ë–≥–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–°–ª–æ–∂–Ω—ã–π']], one_time_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
async def choose_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    difficulty = update.message.text.lower()
    context.user_data['difficulty'] = difficulty
    context.user_data['score'] = 0
    await ask_question(update, context)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questions = load_questions()
    difficulty = context.user_data['difficulty']
    available_questions = [q for q in questions if q['difficulty'] == difficulty]

    if not available_questions:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    question = random.choice(available_questions)
    context.user_data['current_question'] = question

    options = question['options']
    random.shuffle(options)

    await update.message.reply_text(
        f"–í–æ–ø—Ä–æ—Å: {question['question']}\n\n" +
        "\n".join([f"{i+1}. {option}" for i, option in enumerate(options)]),
        reply_markup=ReplyKeyboardMarkup([['1', '2', '3', '4']], one_time_keyboard=True)
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    question = context.user_data['current_question']
    correct_answer = question['correct_answer']

    if user_answer == str(question['options'].index(correct_answer) + 1):
        context.user_data['score'] += 1
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await ask_question(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /results
async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    score = context.user_data.get('score', 0)
    save_results(user_id, score)
    await update.message.reply_text(f"–¢–≤–æ–π –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("7136893641:AAE_45HJZLRHFTMwBai9nCVz0Ny65jP5hrE").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if text in ['–ª—ë–≥–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '—Å–ª–æ–∂–Ω—ã–π']:
        await choose_difficulty(update, context)
    elif text in ['1', '2', '3', '4']:
        await check_answer(update, context)
    elif text == '/results':
        await show_results(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.")

if __name__ == '__main__':
    main()